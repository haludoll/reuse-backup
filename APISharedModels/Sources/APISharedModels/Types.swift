// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// メッセージ受信
    ///
    /// クライアントからのメッセージを受信する基本的なエンドポイント。
    ///
    /// **機能:**
    /// - JSONメッセージの受信
    /// - タイムスタンプの記録
    /// - 受信確認レスポンス
    /// - サーバーログへの出力
    ///
    ///
    /// - Remark: HTTP `POST /api/message`.
    /// - Remark: Generated from `#/paths//api/message/post(receiveMessage)`.
    func receiveMessage(_ input: Operations.receiveMessage.Input) async throws -> Operations.receiveMessage.Output
    /// 写真・動画アップロード
    ///
    /// クライアントから写真または動画をサーバーにアップロードする。
    ///
    /// **機能:**
    /// - 写真・動画のマルチパートアップロード
    /// - ファイルサイズ制限なし（ローカルネットワーク環境に最適化）
    /// - メタデータ付きファイル転送
    /// - メディアタイプ自動判定
    ///
    /// **対応形式:**
    /// - 写真: JPEG, PNG, HEIC, GIF, WebP
    /// - 動画: MOV, MP4, M4V
    ///
    ///
    /// - Remark: HTTP `POST /api/media/upload`.
    /// - Remark: Generated from `#/paths//api/media/upload/post(uploadMedia)`.
    func uploadMedia(_ input: Operations.uploadMedia.Input) async throws -> Operations.uploadMedia.Output
    /// サーバーステータス取得
    ///
    /// サーバーの現在のステータスと基本情報を取得する。
    ///
    /// **用途:**
    /// - サーバーの生存確認
    /// - 接続可能状態の確認
    /// - サーバー情報の取得
    ///
    ///
    /// - Remark: HTTP `GET /api/status`.
    /// - Remark: Generated from `#/paths//api/status/get(getServerStatus)`.
    func getServerStatus(_ input: Operations.getServerStatus.Input) async throws -> Operations.getServerStatus.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// メッセージ受信
    ///
    /// クライアントからのメッセージを受信する基本的なエンドポイント。
    ///
    /// **機能:**
    /// - JSONメッセージの受信
    /// - タイムスタンプの記録
    /// - 受信確認レスポンス
    /// - サーバーログへの出力
    ///
    ///
    /// - Remark: HTTP `POST /api/message`.
    /// - Remark: Generated from `#/paths//api/message/post(receiveMessage)`.
    public func receiveMessage(
        headers: Operations.receiveMessage.Input.Headers = .init(),
        body: Operations.receiveMessage.Input.Body
    ) async throws -> Operations.receiveMessage.Output {
        try await receiveMessage(Operations.receiveMessage.Input(
            headers: headers,
            body: body
        ))
    }
    /// 写真・動画アップロード
    ///
    /// クライアントから写真または動画をサーバーにアップロードする。
    ///
    /// **機能:**
    /// - 写真・動画のマルチパートアップロード
    /// - ファイルサイズ制限なし（ローカルネットワーク環境に最適化）
    /// - メタデータ付きファイル転送
    /// - メディアタイプ自動判定
    ///
    /// **対応形式:**
    /// - 写真: JPEG, PNG, HEIC, GIF, WebP
    /// - 動画: MOV, MP4, M4V
    ///
    ///
    /// - Remark: HTTP `POST /api/media/upload`.
    /// - Remark: Generated from `#/paths//api/media/upload/post(uploadMedia)`.
    public func uploadMedia(
        headers: Operations.uploadMedia.Input.Headers = .init(),
        body: Operations.uploadMedia.Input.Body
    ) async throws -> Operations.uploadMedia.Output {
        try await uploadMedia(Operations.uploadMedia.Input(
            headers: headers,
            body: body
        ))
    }
    /// サーバーステータス取得
    ///
    /// サーバーの現在のステータスと基本情報を取得する。
    ///
    /// **用途:**
    /// - サーバーの生存確認
    /// - 接続可能状態の確認
    /// - サーバー情報の取得
    ///
    ///
    /// - Remark: HTTP `GET /api/status`.
    /// - Remark: Generated from `#/paths//api/status/get(getServerStatus)`.
    public func getServerStatus(headers: Operations.getServerStatus.Input.Headers = .init()) async throws -> Operations.getServerStatus.Output {
        try await getServerStatus(Operations.getServerStatus.Input(headers: headers))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    /// Development server
    public enum Server1 {
        /// Development server
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "http://localhost:8080",
                variables: []
            )
        }
    }
    /// Development server
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "http://localhost:8080",
            variables: []
        )
    }
    /// Local network server
    public enum Server2 {
        /// Local network server
        ///
        /// - Parameters:
        ///   - server_hyphen_ip: Server IP address in local network
        public static func url(server_hyphen_ip: Swift.String = "192.168.1.100") throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "http://{server-ip}:8080",
                variables: [
                    .init(
                        name: "server-ip",
                        value: server_hyphen_ip
                    )
                ]
            )
        }
    }
    /// Local network server
    ///
    /// - Parameters:
    ///   - server_hyphen_ip: Server IP address in local network
    @available(*, deprecated, renamed: "Servers.Server2.url")
    public static func server2(server_hyphen_ip: Swift.String = "192.168.1.100") throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "http://{server-ip}:8080",
            variables: [
                .init(
                    name: "server-ip",
                    value: server_hyphen_ip
                )
            ]
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/MessageRequest`.
        public struct MessageRequest: Codable, Hashable, Sendable {
            /// クライアントからのメッセージ内容
            ///
            /// - Remark: Generated from `#/components/schemas/MessageRequest/message`.
            public var message: Swift.String
            /// メッセージ送信時刻（ISO 8601形式）
            ///
            /// - Remark: Generated from `#/components/schemas/MessageRequest/timestamp`.
            public var timestamp: Foundation.Date
            /// Creates a new `MessageRequest`.
            ///
            /// - Parameters:
            ///   - message: クライアントからのメッセージ内容
            ///   - timestamp: メッセージ送信時刻（ISO 8601形式）
            public init(
                message: Swift.String,
                timestamp: Foundation.Date
            ) {
                self.message = message
                self.timestamp = timestamp
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case timestamp
            }
        }
        /// - Remark: Generated from `#/components/schemas/MessageResponse`.
        public struct MessageResponse: Codable, Hashable, Sendable {
            /// 処理ステータス
            ///
            /// - Remark: Generated from `#/components/schemas/MessageResponse/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case success = "success"
            }
            /// 処理ステータス
            ///
            /// - Remark: Generated from `#/components/schemas/MessageResponse/status`.
            public var status: Components.Schemas.MessageResponse.statusPayload
            /// メッセージ受信確認
            ///
            /// - Remark: Generated from `#/components/schemas/MessageResponse/received`.
            public var received: Swift.Bool
            /// サーバー受信時刻（ISO 8601形式）
            ///
            /// - Remark: Generated from `#/components/schemas/MessageResponse/serverTimestamp`.
            public var serverTimestamp: Foundation.Date?
            /// Creates a new `MessageResponse`.
            ///
            /// - Parameters:
            ///   - status: 処理ステータス
            ///   - received: メッセージ受信確認
            ///   - serverTimestamp: サーバー受信時刻（ISO 8601形式）
            public init(
                status: Components.Schemas.MessageResponse.statusPayload,
                received: Swift.Bool,
                serverTimestamp: Foundation.Date? = nil
            ) {
                self.status = status
                self.received = received
                self.serverTimestamp = serverTimestamp
            }
            public enum CodingKeys: String, CodingKey {
                case status
                case received
                case serverTimestamp
            }
        }
        /// - Remark: Generated from `#/components/schemas/ErrorResponse`.
        public struct ErrorResponse: Codable, Hashable, Sendable {
            /// エラーステータス
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case error = "error"
            }
            /// エラーステータス
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/status`.
            public var status: Components.Schemas.ErrorResponse.statusPayload
            /// エラーメッセージ
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/error`.
            public var error: Swift.String
            /// メッセージ受信状態
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/received`.
            public var received: Swift.Bool
            /// Creates a new `ErrorResponse`.
            ///
            /// - Parameters:
            ///   - status: エラーステータス
            ///   - error: エラーメッセージ
            ///   - received: メッセージ受信状態
            public init(
                status: Components.Schemas.ErrorResponse.statusPayload,
                error: Swift.String,
                received: Swift.Bool
            ) {
                self.status = status
                self.error = error
                self.received = received
            }
            public enum CodingKeys: String, CodingKey {
                case status
                case error
                case received
            }
        }
        /// - Remark: Generated from `#/components/schemas/MediaUploadResponse`.
        public struct MediaUploadResponse: Codable, Hashable, Sendable {
            /// アップロード処理ステータス
            ///
            /// - Remark: Generated from `#/components/schemas/MediaUploadResponse/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case success = "success"
                case error = "error"
            }
            /// アップロード処理ステータス
            ///
            /// - Remark: Generated from `#/components/schemas/MediaUploadResponse/status`.
            public var status: Components.Schemas.MediaUploadResponse.statusPayload
            /// アップロードされたメディアの一意識別子（成功時のみ）
            ///
            /// - Remark: Generated from `#/components/schemas/MediaUploadResponse/mediaId`.
            public var mediaId: Swift.String?
            /// アップロードされたファイル名（成功時のみ）
            ///
            /// - Remark: Generated from `#/components/schemas/MediaUploadResponse/filename`.
            public var filename: Swift.String?
            /// メディアタイプ（成功時のみ）
            ///
            /// - Remark: Generated from `#/components/schemas/MediaUploadResponse/mediaType`.
            @frozen public enum mediaTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case photo = "photo"
                case video = "video"
            }
            /// メディアタイプ（成功時のみ）
            ///
            /// - Remark: Generated from `#/components/schemas/MediaUploadResponse/mediaType`.
            public var mediaType: Components.Schemas.MediaUploadResponse.mediaTypePayload?
            /// アップロードされたファイルサイズ（成功時のみ）
            ///
            /// - Remark: Generated from `#/components/schemas/MediaUploadResponse/fileSize`.
            public var fileSize: Swift.Int64?
            /// サーバー処理時刻（ISO 8601形式）
            ///
            /// - Remark: Generated from `#/components/schemas/MediaUploadResponse/serverTimestamp`.
            public var serverTimestamp: Foundation.Date
            /// エラーメッセージ（エラー時のみ）
            ///
            /// - Remark: Generated from `#/components/schemas/MediaUploadResponse/error`.
            public var error: Swift.String?
            /// Creates a new `MediaUploadResponse`.
            ///
            /// - Parameters:
            ///   - status: アップロード処理ステータス
            ///   - mediaId: アップロードされたメディアの一意識別子（成功時のみ）
            ///   - filename: アップロードされたファイル名（成功時のみ）
            ///   - mediaType: メディアタイプ（成功時のみ）
            ///   - fileSize: アップロードされたファイルサイズ（成功時のみ）
            ///   - serverTimestamp: サーバー処理時刻（ISO 8601形式）
            ///   - error: エラーメッセージ（エラー時のみ）
            public init(
                status: Components.Schemas.MediaUploadResponse.statusPayload,
                mediaId: Swift.String? = nil,
                filename: Swift.String? = nil,
                mediaType: Components.Schemas.MediaUploadResponse.mediaTypePayload? = nil,
                fileSize: Swift.Int64? = nil,
                serverTimestamp: Foundation.Date,
                error: Swift.String? = nil
            ) {
                self.status = status
                self.mediaId = mediaId
                self.filename = filename
                self.mediaType = mediaType
                self.fileSize = fileSize
                self.serverTimestamp = serverTimestamp
                self.error = error
            }
            public enum CodingKeys: String, CodingKey {
                case status
                case mediaId
                case filename
                case mediaType
                case fileSize
                case serverTimestamp
                case error
            }
        }
        /// - Remark: Generated from `#/components/schemas/ServerStatus`.
        public struct ServerStatus: Codable, Hashable, Sendable {
            /// サーバーの現在のステータス
            ///
            /// - Remark: Generated from `#/components/schemas/ServerStatus/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case running = "running"
                case starting = "starting"
                case stopping = "stopping"
            }
            /// サーバーの現在のステータス
            ///
            /// - Remark: Generated from `#/components/schemas/ServerStatus/status`.
            public var status: Components.Schemas.ServerStatus.statusPayload
            /// サーバー稼働時間（秒）
            ///
            /// - Remark: Generated from `#/components/schemas/ServerStatus/uptime`.
            public var uptime: Swift.Int
            /// サーバーアプリのバージョン
            ///
            /// - Remark: Generated from `#/components/schemas/ServerStatus/version`.
            public var version: Swift.String
            /// サーバーの現在時刻（ISO 8601形式）
            ///
            /// - Remark: Generated from `#/components/schemas/ServerStatus/serverTime`.
            public var serverTime: Foundation.Date
            /// Creates a new `ServerStatus`.
            ///
            /// - Parameters:
            ///   - status: サーバーの現在のステータス
            ///   - uptime: サーバー稼働時間（秒）
            ///   - version: サーバーアプリのバージョン
            ///   - serverTime: サーバーの現在時刻（ISO 8601形式）
            public init(
                status: Components.Schemas.ServerStatus.statusPayload,
                uptime: Swift.Int,
                version: Swift.String,
                serverTime: Foundation.Date
            ) {
                self.status = status
                self.uptime = uptime
                self.version = version
                self.serverTime = serverTime
            }
            public enum CodingKeys: String, CodingKey {
                case status
                case uptime
                case version
                case serverTime
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// メッセージ受信
    ///
    /// クライアントからのメッセージを受信する基本的なエンドポイント。
    ///
    /// **機能:**
    /// - JSONメッセージの受信
    /// - タイムスタンプの記録
    /// - 受信確認レスポンス
    /// - サーバーログへの出力
    ///
    ///
    /// - Remark: HTTP `POST /api/message`.
    /// - Remark: Generated from `#/paths//api/message/post(receiveMessage)`.
    public enum receiveMessage {
        public static let id: Swift.String = "receiveMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/message/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.receiveMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.receiveMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.receiveMessage.Input.Headers
            /// - Remark: Generated from `#/paths/api/message/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/message/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.MessageRequest)
            }
            public var body: Operations.receiveMessage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.receiveMessage.Input.Headers = .init(),
                body: Operations.receiveMessage.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/message/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/message/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.MessageResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MessageResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.receiveMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.receiveMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// メッセージ受信成功
            ///
            /// - Remark: Generated from `#/paths//api/message/post(receiveMessage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.receiveMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.receiveMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/message/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/message/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.receiveMessage.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.receiveMessage.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// 無効なリクエスト
            ///
            /// - Remark: Generated from `#/paths//api/message/post(receiveMessage)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.receiveMessage.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.receiveMessage.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/message/POST/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/message/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.receiveMessage.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.receiveMessage.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// サーバー内部エラー
            ///
            /// - Remark: Generated from `#/paths//api/message/post(receiveMessage)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.receiveMessage.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.receiveMessage.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 写真・動画アップロード
    ///
    /// クライアントから写真または動画をサーバーにアップロードする。
    ///
    /// **機能:**
    /// - 写真・動画のマルチパートアップロード
    /// - ファイルサイズ制限なし（ローカルネットワーク環境に最適化）
    /// - メタデータ付きファイル転送
    /// - メディアタイプ自動判定
    ///
    /// **対応形式:**
    /// - 写真: JPEG, PNG, HEIC, GIF, WebP
    /// - 動画: MOV, MP4, M4V
    ///
    ///
    /// - Remark: HTTP `POST /api/media/upload`.
    /// - Remark: Generated from `#/paths//api/media/upload/post(uploadMedia)`.
    public enum uploadMedia {
        public static let id: Swift.String = "uploadMedia"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/media/upload/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.uploadMedia.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.uploadMedia.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.uploadMedia.Input.Headers
            /// - Remark: Generated from `#/paths/api/media/upload/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/media/upload/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/media/upload/POST/requestBody/multipartForm/file`.
                    public struct filePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `filePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case file(OpenAPIRuntime.MultipartPart<Operations.uploadMedia.Input.Body.multipartFormPayload.filePayload>)
                    /// - Remark: Generated from `#/paths/api/media/upload/POST/requestBody/multipartForm/filename`.
                    public struct filenamePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `filenamePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case filename(OpenAPIRuntime.MultipartPart<Operations.uploadMedia.Input.Body.multipartFormPayload.filenamePayload>)
                    /// - Remark: Generated from `#/paths/api/media/upload/POST/requestBody/multipartForm/fileSize`.
                    public struct fileSizePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `fileSizePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case fileSize(OpenAPIRuntime.MultipartPart<Operations.uploadMedia.Input.Body.multipartFormPayload.fileSizePayload>)
                    /// - Remark: Generated from `#/paths/api/media/upload/POST/requestBody/multipartForm/mimeType`.
                    public struct mimeTypePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `mimeTypePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case mimeType(OpenAPIRuntime.MultipartPart<Operations.uploadMedia.Input.Body.multipartFormPayload.mimeTypePayload>)
                    /// - Remark: Generated from `#/paths/api/media/upload/POST/requestBody/multipartForm/mediaType`.
                    public struct mediaTypePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `mediaTypePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case mediaType(OpenAPIRuntime.MultipartPart<Operations.uploadMedia.Input.Body.multipartFormPayload.mediaTypePayload>)
                    /// - Remark: Generated from `#/paths/api/media/upload/POST/requestBody/multipartForm/timestamp`.
                    public struct timestampPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `timestampPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case timestamp(OpenAPIRuntime.MultipartPart<Operations.uploadMedia.Input.Body.multipartFormPayload.timestampPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/api/media/upload/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.uploadMedia.Input.Body.multipartFormPayload>)
            }
            public var body: Operations.uploadMedia.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.uploadMedia.Input.Headers = .init(),
                body: Operations.uploadMedia.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/media/upload/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/media/upload/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.MediaUploadResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MediaUploadResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.uploadMedia.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.uploadMedia.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// アップロード成功
            ///
            /// - Remark: Generated from `#/paths//api/media/upload/post(uploadMedia)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.uploadMedia.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.uploadMedia.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/media/upload/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/media/upload/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.uploadMedia.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.uploadMedia.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// 無効なリクエスト
            ///
            /// - Remark: Generated from `#/paths//api/media/upload/post(uploadMedia)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.uploadMedia.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.uploadMedia.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Code507: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/media/upload/POST/responses/507/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/media/upload/POST/responses/507/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.uploadMedia.Output.Code507.Body
                /// Creates a new `Code507`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.uploadMedia.Output.Code507.Body) {
                    self.body = body
                }
            }
            /// ストレージ容量不足
            ///
            /// - Remark: Generated from `#/paths//api/media/upload/post(uploadMedia)/responses/507`.
            ///
            /// HTTP response code: `507 code507`.
            case code507(Operations.uploadMedia.Output.Code507)
            /// The associated value of the enum case if `self` is `.code507`.
            ///
            /// - Throws: An error if `self` is not `.code507`.
            /// - SeeAlso: `.code507`.
            public var code507: Operations.uploadMedia.Output.Code507 {
                get throws {
                    switch self {
                    case let .code507(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "code507",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/media/upload/POST/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/media/upload/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.uploadMedia.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.uploadMedia.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// サーバー内部エラー
            ///
            /// - Remark: Generated from `#/paths//api/media/upload/post(uploadMedia)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.uploadMedia.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.uploadMedia.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// サーバーステータス取得
    ///
    /// サーバーの現在のステータスと基本情報を取得する。
    ///
    /// **用途:**
    /// - サーバーの生存確認
    /// - 接続可能状態の確認
    /// - サーバー情報の取得
    ///
    ///
    /// - Remark: HTTP `GET /api/status`.
    /// - Remark: Generated from `#/paths//api/status/get(getServerStatus)`.
    public enum getServerStatus {
        public static let id: Swift.String = "getServerStatus"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/status/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getServerStatus.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getServerStatus.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getServerStatus.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getServerStatus.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/status/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/status/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ServerStatus)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ServerStatus {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getServerStatus.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getServerStatus.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// サーバーステータス取得成功
            ///
            /// - Remark: Generated from `#/paths//api/status/get(getServerStatus)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getServerStatus.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getServerStatus.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
